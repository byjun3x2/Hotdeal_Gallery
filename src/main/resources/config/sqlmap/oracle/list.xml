<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.hotdeal.board.dao.HotdealDAO">

	<resultMap id="hotdealResultMap"
		type="kr.co.hotdeal.board.vo.HotdealVO">
		<id property="id" column="ID" />
		<result property="thumbnail" column="THUMBNAIL" />
		<result property="title" column="TITLE" />
		<result property="author" column="AUTHOR" />
		<result property="regDate" column="REGDATE" />
		<result property="views" column="VIEWS" />
		<result property="likes" column="LIKES" />
		<result property="dislikes" column="DISLIKES" />
		<result property="content" column="CONTENT" />
		<result property="productId" column="PRODUCT_ID" />
		<result property="commentCount" column="COMMENT_COUNT" />

		<association property="product"
			javaType="kr.co.hotdeal.product.vo.ProductVO">
			<id property="productId" column="PRODUCT_ID" />
			<result property="category" column="CATEGORY" />
			<result property="shopName" column="SHOP_NAME" />
			<result property="productName" column="PRODUCT_NAME" />
			<result property="price" column="PRICE" />
			<result property="deliveryFee" column="DELIVERY_FEE" />
			<result property="relatedUrl" column="RELATED_URL" />
		</association>
	</resultMap>

	<select id="getHotdealById" parameterType="int"
		resultMap="hotdealResultMap">
		SELECT
		h.ID, h.THUMBNAIL, h.TITLE, h.AUTHOR, h.CONTENT,
		TO_CHAR(h.REG_DATE, 'YYYY-MM-DD HH24:MI:SS') AS REGDATE,
		h.VIEWS, h.LIKES, h.DISLIKES,
		p.PRODUCT_ID, p.CATEGORY, p.SHOP_NAME, p.PRODUCT_NAME, p.PRICE, p.DELIVERY_FEE,
		p.RELATED_URL
		FROM
		HOTDEAL h
		JOIN
		PRODUCT p ON h.PRODUCT_ID = p.PRODUCT_ID
		WHERE
		h.ID = #{id}
	</select>

	<insert id="insertHotdeal"
		parameterType="kr.co.hotdeal.board.vo.HotdealVO">
		<selectKey keyProperty="id" resultType="int" order="BEFORE">
			SELECT
			HOTDEAL_SEQ.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO HOTDEAL (
		ID, THUMBNAIL, TITLE, AUTHOR, REG_DATE, VIEWS,
		LIKES, DISLIKES, CONTENT,
		PRODUCT_ID
		) VALUES (
		#{id}, #{thumbnail},
		#{title}, #{author}, SYSDATE, 0, 0,
		0, #{content}, #{productId}
		)
	</insert>

	<update id="updateHotdeal"
		parameterType="kr.co.hotdeal.board.vo.HotdealVO">
		UPDATE HOTDEAL
		SET
		THUMBNAIL = #{thumbnail},
		TITLE = #{title},
		CONTENT = #{content},
		PRODUCT_ID = #{productId}
		WHERE ID = #{id}
</update>

	<delete id="deleteHotdeal" parameterType="int">
    DELETE FROM HOTDEAL WHERE ID = #{id}
</delete>

	<!-- [REVISED] 총 개수 조회 쿼리 - 카테고리 조건 추가 -->
	<select id="getHotdealTotalCountByKeyword" parameterType="map"
		resultType="int">
		SELECT COUNT(*)
		FROM HOTDEAL h
		JOIN PRODUCT p ON h.PRODUCT_ID = p.PRODUCT_ID
		<where>
			<if test="keyword != null and keyword != ''">
				AND h.TITLE LIKE '%' || #{keyword} || '%'
			</if>
			<!-- [ADD] 카테고리 필터링 조건 추가 -->
			<if test="category != null and category != ''">
				AND p.CATEGORY = #{category}
			</if>
		</where>
	</select>

	<!-- [REVISED] 목록 조회 쿼리 - 카테고리 조건 추가 -->
	<select id="getHotdealListPagingByKeyword" parameterType="map"
		resultMap="hotdealResultMap">
		SELECT * FROM (
		SELECT ROWNUM AS RNUM, A.* FROM (
		SELECT
		h.ID, h.THUMBNAIL, h.TITLE, h.AUTHOR,
		TO_CHAR(h.REG_DATE, 'YYYY-MM-DD HH24:MI:SS') AS REGDATE,
		h.VIEWS, h.LIKES, h.DISLIKES, h.PRODUCT_ID,
		p.CATEGORY, p.SHOP_NAME, p.PRODUCT_NAME, p.PRICE, p.DELIVERY_FEE,
		(SELECT COUNT(*) FROM HOTDEAL_COMMENT c WHERE c.HOTDEAL_ID = h.ID) AS
		COMMENT_COUNT
		FROM HOTDEAL h
		JOIN PRODUCT p ON h.PRODUCT_ID = p.PRODUCT_ID
		<where>
			<if test="keyword != null and keyword != ''">
				AND h.TITLE LIKE '%' || #{keyword} || '%'
			</if>
			<!-- [ADD] 카테고리 필터링 조건 추가 -->
			<if test="category != null and category != ''">
				AND p.CATEGORY = #{category}
			</if>
		</where>
		ORDER BY h.ID DESC
		) A
		WHERE ROWNUM &lt;= #{pageEnd}
		)
		WHERE RNUM &gt;= #{pageStart}
	</select>

	<update id="increaseViews" parameterType="int">
		UPDATE HOTDEAL SET
		VIEWS = VIEWS + 1 WHERE ID = #{id}
	</update>

	<update id="decreaseLikes" parameterType="int">
		UPDATE HOTDEAL SET
		LIKES = LIKES - 1 WHERE ID = #{id} AND LIKES > 0
	</update>

	<update id="decreaseDislikes" parameterType="int">
		UPDATE HOTDEAL SET
		DISLIKES = DISLIKES - 1 WHERE ID = #{id} AND DISLIKES > 0
	</update>

	<update id="increaseLikes" parameterType="int">
		UPDATE HOTDEAL SET
		LIKES = LIKES + 1 WHERE ID = #{id}
	</update>

	<update id="increaseDislikes" parameterType="int">
		UPDATE HOTDEAL SET
		DISLIKES = DISLIKES + 1 WHERE ID = #{id}
	</update>

	<delete id="deleteAllHotdeals">
		DELETE FROM HOTDEAL
	</delete>

	<select id="getBestHotdealList" parameterType="int"
		resultMap="hotdealResultMap">
		SELECT * FROM (
		SELECT
		h.ID, h.TITLE, h.LIKES, h.DISLIKES, p.CATEGORY,
		(SELECT COUNT(*) FROM HOTDEAL_COMMENT c WHERE c.HOTDEAL_ID = h.ID) AS
		COMMENT_COUNT,
		(h.LIKES - h.DISLIKES) AS POPULARITY
		FROM
		HOTDEAL h
		JOIN
		PRODUCT p ON h.PRODUCT_ID = p.PRODUCT_ID
		WHERE (h.LIKES - h.DISLIKES) > 0
		ORDER BY
		POPULARITY DESC, h.ID DESC
		)
		WHERE ROWNUM &lt;= #{limit}
	</select>

</mapper>