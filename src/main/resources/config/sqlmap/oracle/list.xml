<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.hotdeal.board.dao.HotdealDAO">

	<!-- 컬럼과 VO 필드를 명시적으로 매핑하는 resultMap 정의 (CATEGORY 매핑 제거) -->
	<!-- [FIX] Product 테이블과 JOIN하여 category를 가져올 수 있도록 resultMap에 category 매핑 
		추가 -->
	<resultMap id="hotdealResultMap"
		type="kr.co.hotdeal.board.vo.HotdealVO">
		<id property="id" column="ID" />
		<result property="thumbnail" column="THUMBNAIL" />
		<result property="title" column="TITLE" />
		<result property="author" column="AUTHOR" />
		<result property="regDate" column="REGDATE" />
		<result property="views" column="VIEWS" />
		<result property="likes" column="LIKES" />
		<result property="dislikes" column="DISLIKES" />
		<result property="content" column="CONTENT" />
		<result property="productId" column="PRODUCT_ID" />
		<result property="category" column="CATEGORY" />
		
	  	<!-- [ADD] resultMap에 댓글 수 필드 매핑 추가 -->
    	<result property="commentCount" column="COMMENT_COUNT"/>
    	
    	<association property="product" javaType="kr.co.hotdeal.product.vo.ProductVO">
            <id property="productId" column="PRODUCT_ID"/>
            <result property="category" column="CATEGORY"/>
            <result property="shopName" column="SHOP_NAME"/>
            <result property="productName" column="PRODUCT_NAME"/>
            <result property="price" column="PRICE"/>
            <result property="deliveryFee" column="DELIVERY_FEE"/>
        </association>
	</resultMap>

	<!-- [ADD] 베스트 게시글 샘플 데이터 10개 생성용 쿼리 (Oracle PL/SQL) -->
	<!-- 이 쿼리는 일반적인 파라미터 매핑이 아닌, 실행 자체를 목적으로 합니다. -->
	<insert id="insertSampleBestHotdeals">
		BEGIN
		DECLARE
		v_product_id PRODUCT.PRODUCT_ID%TYPE;
		BEGIN
		-- 1. 외래키 제약조건을 만족시키기 위해 부모 상품 데이터를 먼저 하나 생성합니다.
		v_product_id := SYS_GUID();
		INSERT INTO PRODUCT (
		PRODUCT_ID, CATEGORY, SHOP_NAME, PRODUCT_NAME, PRICE, DELIVERY_FEE
		) VALUES (
		v_product_id, '샘플', '샘플샵', '베스트글 테스트용 상품', 9900, '무료'
		);

		-- 2. 반복문을 사용해 핫딜 데이터 10개를 생성합니다.
		FOR i IN 1..10 LOOP
		INSERT INTO HOTDEAL (
		ID, THUMBNAIL, TITLE, AUTHOR, REG_DATE,
		VIEWS, LIKES, DISLIKES, CONTENT, PRODUCT_ID
		) VALUES (
		HOTDEAL_SEQ.NEXTVAL,
		'https://placehold.co/100',
		'베스트 게시글 샘플 ' || i,
		'샘플생성기',
		SYSDATE,
		TRUNC(DBMS_RANDOM.VALUE(50, 500)), -- 조회수 (50~499)
		TRUNC(DBMS_RANDOM.VALUE(10, 101)), -- 추천수 (10~100)
		TRUNC(DBMS_RANDOM.VALUE(0, 101)), -- 비추천수 (0~100)
		'베스트 게시글 테스트를 위해 자동 생성된 데이터입니다.',
		v_product_id -- 위에서 생성한 상품 ID를 사용
		);
		END LOOP;
		END;
		END;
	</insert>


	<!-- [ADD] 베스트 게시글 조회 쿼리 -->
	<select id="getBestHotdealList" parameterType="int" resultMap="hotdealResultMap">
    SELECT * FROM (
        SELECT
            h.ID,
            h.TITLE,
            h.LIKES,
            h.DISLIKES,
            p.CATEGORY,
            -- [REVISED] 각 게시글의 댓글 수를 세는 서브쿼리 추가
            (SELECT COUNT(*) FROM HOTDEAL_COMMENT c WHERE c.HOTDEAL_ID = h.ID) AS COMMENT_COUNT,
            (h.LIKES - h.DISLIKES) AS POPULARITY
        FROM
            HOTDEAL h
        JOIN
            PRODUCT p ON h.PRODUCT_ID = p.PRODUCT_ID
        WHERE (h.LIKES - h.DISLIKES) > 0
        ORDER BY
            POPULARITY DESC, h.ID DESC
    )
    WHERE ROWNUM &lt;= #{limit}
</select>

	<!-- 1. 전체 핫딜 리스트 조회 (CATEGORY 컬럼 제거) -->
	<select id="getHotdealList" resultMap="hotdealResultMap">
		SELECT
		ID,
		THUMBNAIL,
		TITLE,
		AUTHOR,
		TO_CHAR(REG_DATE,
		'YYYY-MM-DD HH24:MI:SS') AS REGDATE,
		VIEWS,
		LIKES,
		DISLIKES,
		PRODUCT_ID
		FROM HOTDEAL
		ORDER BY ID
		DESC
	</select>

	<!-- 2. 단일 핫딜 조회 (CATEGORY 컬럼 제거) -->
	<select id="getHotdealById" parameterType="int"
		resultMap="hotdealResultMap">
		SELECT
		ID,
		THUMBNAIL,
		TITLE,
		AUTHOR,
		TO_CHAR(REG_DATE,
		'YYYY-MM-DD HH24:MI:SS') AS REGDATE,
		VIEWS,
		LIKES,
		DISLIKES,
		CONTENT,
		PRODUCT_ID
		FROM HOTDEAL
		WHERE ID =
		#{id}
	</select>

	<!-- 3. 핫딜 등록 (CATEGORY 관련 내용 제거) -->
	<insert id="insertHotdeal"
		parameterType="kr.co.hotdeal.board.vo.HotdealVO">
		<selectKey keyProperty="id" resultType="int" order="BEFORE">
			SELECT
			HOTDEAL_SEQ.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO HOTDEAL (
		ID, THUMBNAIL, TITLE, AUTHOR, REG_DATE, VIEWS, LIKES, DISLIKES, CONTENT,
		PRODUCT_ID
		) VALUES (
		#{id}, #{thumbnail}, #{title}, #{author}, SYSDATE, 0, 0,
		0, #{content}, #{productId}
		)
	</insert>

	<!-- 4. 핫딜 수정 (CATEGORY 관련 내용 제거) -->
	<update id="updateHotdeal"
		parameterType="kr.co.hotdeal.board.vo.HotdealVO">
		UPDATE HOTDEAL
		SET
		THUMBNAIL = #{thumbnail},
		TITLE =
		#{title},
		CONTENT = #{content},
		PRODUCT_ID = #{productId}
		WHERE ID =
		#{id}
	</update>

	<!-- 5. 핫딜 삭제 -->
	<delete id="deleteHotdeal" parameterType="int">
		DELETE FROM HOTDEAL
		WHERE ID = #{id}
	</delete>

	<!-- 페이징 리스트 조회 (CATEGORY 컬럼 제거) -->
	<select id="getHotdealListPaging" parameterType="map"
		resultMap="hotdealResultMap">
		SELECT * FROM (
		SELECT ROWNUM AS RNUM, A.* FROM (
		SELECT
		ID,
		THUMBNAIL,
		TITLE,
		AUTHOR,
		TO_CHAR(REG_DATE, 'YYYY-MM-DD HH24:MI:SS') AS
		regDate,
		VIEWS,
		LIKES,
		DISLIKES,
		PRODUCT_ID
		FROM HOTDEAL
		ORDER BY ID DESC
		) A
		WHERE ROWNUM &lt;=
		#{pageEnd}
		)
		WHERE RNUM &gt;= #{pageStart}
	</select>

	<!-- 전체 게시글 수 -->
	<select id="getHotdealTotalCount" resultType="int">
		SELECT COUNT(*)
		FROM HOTDEAL
	</select>


	<!-- 검색 포함 전체 게시글 수 -->
<select id="getHotdealTotalCountByKeyword" parameterType="map" resultType="int">
    SELECT COUNT(*) 
    FROM HOTDEAL h
    JOIN PRODUCT p ON h.PRODUCT_ID = p.PRODUCT_ID
    <where>
        <if test="keyword != null and keyword != ''">
            AND h.TITLE LIKE '%' || #{keyword} || '%'
        </if>
        <if test="category != null and category != ''">
            AND p.CATEGORY = #{category}
        </if>
    </where>
</select>

	<!-- [MODIFIED] 검색 포함 페이징 리스트 쿼리 (카테고리 필터 추가) -->
<!-- JOIN을 통해 PRODUCT 테이블의 CATEGORY를 가져오고, WHERE 절에서 필터링합니다. -->
    <select id="getHotdealListPagingByKeyword" parameterType="map" resultMap="hotdealResultMap">
        SELECT * FROM (
            SELECT ROWNUM AS RNUM, A.* FROM (
                SELECT 
                    h.ID, h.THUMBNAIL, h.TITLE, h.AUTHOR, 
                    TO_CHAR(h.REG_DATE, 'YYYY-MM-DD HH24:MI:SS') AS REGDATE,
                    h.VIEWS, h.LIKES, h.DISLIKES, h.PRODUCT_ID,
                    -- Product 테이블 정보 추가
                    p.CATEGORY, p.SHOP_NAME, p.PRODUCT_NAME, p.PRICE, p.DELIVERY_FEE,
                    -- 댓글 수 서브쿼리
                    (SELECT COUNT(*) FROM HOTDEAL_COMMENT c WHERE c.HOTDEAL_ID = h.ID) AS COMMENT_COUNT
                FROM HOTDEAL h
                JOIN PRODUCT p ON h.PRODUCT_ID = p.PRODUCT_ID -- JOIN 추가
                <where>
                    <if test="keyword != null and keyword != ''">
                        AND h.TITLE LIKE '%' || #{keyword} || '%'
                    </if>
                    <if test="category != null and category != ''">
                        AND p.CATEGORY = #{category}
                    </if>
                </where>
                ORDER BY h.ID DESC
            ) A
            WHERE ROWNUM &lt;= #{pageEnd}
        )
        WHERE RNUM &gt;= #{pageStart}
    </select>


	<update id="increaseViews" parameterType="int">
		UPDATE HOTDEAL SET
		VIEWS = VIEWS + 1 WHERE ID = #{id}
	</update>

	<update id="decreaseLikes" parameterType="int">
		UPDATE HOTDEAL SET
		LIKES = LIKES - 1 WHERE ID = #{id} AND LIKES > 0
	</update>
	<update id="decreaseDislikes" parameterType="int">
		UPDATE HOTDEAL SET
		DISLIKES = DISLIKES - 1 WHERE ID = #{id} AND DISLIKES > 0
	</update>

	<update id="increaseLikes" parameterType="int">
		UPDATE HOTDEAL SET
		LIKES = LIKES + 1 WHERE ID = #{id}
	</update>

	<update id="increaseDislikes" parameterType="int">
		UPDATE HOTDEAL SET
		DISLIKES = DISLIKES + 1 WHERE ID = #{id}
	</update>

	<delete id="deleteAllHotdeals">
    DELETE FROM HOTDEAL
</delete>

</mapper>
